# -*- coding: utf-8 -*-
"""Carbon Emission Prediction on the World Bank Dataset for Canada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zN_2OYOOwje3y9ncFC0McSvbAqN9bkWd

### **Carbon Emission Prediction on the World Bank Dataset for Canada**
"""

import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/dataset.csv')

df

df_canada = df[df['Country Name'] == 'Canada']
df_canada = df_canada.drop('Country Name',axis =1)

Year = df_canada.columns

canada_df = df_canada.T

canada_df.head()

columns = ['Emission']
canada_df.columns = columns

canada_df.head()

canada_df.reset_index(inplace=True)
canada_df = canada_df.rename(columns = {'index':'Year'})
canada_df.head()

# canada_df.isna()
canada_df.info()

X = canada_df.Year
y = canada_df.Emission

plt.rcParams['figure.figsize'] = 15,8
plt.plot(X, y)
plt.plot(y.rolling(10).mean())
plt.xlabel('Year')
plt.ylabel('Emission (metric to per capita)')
plt.show()

cumulative = np.cumsum(y)
plt.plot(cumulative)

y.rolling(10).mean()

X = np.array(X, dtype = 'int32')
X = X.reshape(-1,1)
X.shape

y = np.array(y)
y = y.reshape(-1,1)
y.shape

"""# Prediction Using Machine Learning"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

X_train, X_test,y_train, y_test = train_test_split(X,y,test_size = 0.1)

X_train.shape

y_train.shape

LinearReg = LinearRegression()
DSTReg = DecisionTreeRegressor(random_state=0)
RFReg = RandomForestRegressor(n_estimators=500, random_state=0)
SVMReg = SVR(kernel='rbf')

LinearReg.fit(X_train,y_train)
DSTReg.fit(X_train,y_train)
RFReg.fit(X_train,y_train)
SVMReg.fit(X_train,y_train)

linear_y =LinearReg.predict(X_test).reshape(-1, 1)
DST_y = DSTReg.predict(X_test).reshape(-1,1)
RF_y = RFReg.predict(X_test).reshape(-1,1)
SVM_y = SVMReg.predict(X_test).reshape(-1,1)

def accuracy(predicted, actual):
  diff = actual - predicted
  accurate_pred = 0
  for x in diff:
    if -1<x<1:
      accurate_pred +=1
  accuracy = accurate_pred/len(actual)

  return accuracy

linear_acc = accuracy(linear_y,y_test)
DST_acc = accuracy(DST_y, y_test)
RF_acc = accuracy(RF_y, y_test)
SVM_acc = accuracy(SVM_y, y_test)

print(RF_acc)

a = [2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030]
df=pd.DataFrame(a, columns=['Year'])
df

LinearRegression= LinearReg.predict(df)
DecisionTree = DSTReg.predict(df)
RandomForest=RFReg.predict(df)
SVM = SVMReg.predict(df)

df['LinearRegression'] = LinearRegression
df['Decision Tree'] = DecisionTree
df['Random Forest'] = RandomForest
df['SVM'] = SVM

df.columns

print(df)

df.plot.line(x="Year", title="Comparison Between Linear Regression, Decision Tree, \nRandom Forest, Support Vector Machine for Predictive Modeling\n")

plt.rcParams['figure.figsize'] = 12,8

xpos = np.arange(len(df.Year))

plt.yticks(list(range(1, 30, 2)))
plt.xticks(xpos, df.Year)
plt.bar(xpos+0.3, df['LinearRegression'], label='Linear Regression', width=0.3)
plt.bar(xpos, df['SVM'], label='SVM', width=0.3)
plt.bar(xpos-0.3, df['Random Forest'], label='Random Forest', width=0.3)
plt.legend()

cumulative = np.cumsum(df.iloc[:, 1:])

import seaborn as sns

plt.plot(df.Year, cumulative)
plt.xlabel('Year')
plt.ylabel('Total CO2 Emission')